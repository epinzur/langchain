from __future__ import annotations

from typing import Optional

from langchain_core._api import deprecated
from langchain_core.load import Serializable
from pydantic import Field

from langchain_community.graph_vectorstores.links import (
    Link,
)

NODE_CLASS_DEPRECATED_SINCE = "0.3.5"


@deprecated(
    since=NODE_CLASS_DEPRECATED_SINCE,
    pending=True,
    alternative="langchain_core.documents.Document",
)
class Node(Serializable):
    """Node in the GraphVectorStore.

    Edges exist from nodes with an outgoing link to nodes with a matching incoming link.

    For instance two nodes `a` and `b` connected over a hyperlink ``https://some-url``
    would look like:

    .. code-block:: python

        [
            Node(
                id="a",
                text="some text a",
                links= [
                    Link(kind="hyperlink", tag="https://some-url", direction="incoming")
                ],
            ),
            Node(
                id="b",
                text="some text b",
                links= [
                    Link(kind="hyperlink", tag="https://some-url", direction="outgoing")
                ],
            )
        ]
    """

    id: Optional[str] = None
    """Unique ID for the node. Will be generated by the GraphVectorStore if not set."""
    text: str
    """Text contained by the node."""
    metadata: dict = Field(default_factory=dict)
    """Metadata for the node."""
    links: list[Link] = Field(default_factory=list)
    """Links associated with the node."""
